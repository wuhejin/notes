一.IO：Java对数据的操作是通过流的方式，IO流用来处理设备之间的数据传输，上传文件和下载文件，Java用于操作流的对象都在IO包中。

二.IO流分为：字符流和字节流

字节流读取字节，字符流读取一个到多个字节(中文对应，一个字符对应两个字节，UTF-8编码中对应，一个字符对应三个字节)
字节流可处理所有类型文件，如：MP3，AVI视频文件，图片， 而字符流只能处理字符数据，如：存文本数据（优先考虑字符流，此外都用字节流）
1char = 2(或3) byte
1 byte = 8 bit

字节流在操作时本身是不会用缓冲区（内存）的，是与文件本身直接操作的，而字符流在操作的时候是用到缓冲区的
字节流在操作文件时，即使不关闭资源（close方法），文件也能输出，但是字符流如果不关闭资源，则不会输出任何内容，说明字符流用的是缓冲区，并且可以通过flush方法强制进行刷新缓冲区，才能在不关闭资源的情况下输出内容
一般开发使用字节流比较多

三.字节流：
1.字节流基类
1）.InputStream
InputStream：字节输入流基类，抽象类是表示字节输入流的所有类的超类。
常用方法：
    // 从输入流中读取数据的下一个字节
    abstract int read()
    // 从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b中
    int read(byte[] b)
    // 将输入流中最多 len 个数据字节读入 byte 数组
    int read(byte[] b, int off, int len)
    // 跳过和丢弃此输入流中数据的 n个字节
    long skip(long n)
    // 关闭此输入流并释放与该流关联的所有系统资源
    void close()
2）.OutputStream
OutputStream：字节输出流基类，抽象类是表示输出字节流的所有类的超类。
常用方法：
    // 将 b.length 个字节从指定的 byte 数组写入此输出流
    void write(byte[] b)
    // 将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此输出流
    void write(byte[] b, int off, int len)
    // 将指定的字节写入此输出流
    abstract void write(int b)
    // 关闭此输出流并释放与此流有关的所有系统资源
    void close()
    // 刷新此输出流并强制写出所有缓冲的输出字节
    void flush()
2.字节文件操作流
1）.FileInputStream
FileInputStream：字节文件输入流，从文件系统中的某个文件中获得输入字节，用于读取诸如图像数据之类的原始字节流。
构造方法：
    // 通过打开一个到实际文件的连接来创建一个FileInputStream，该文件通过文件系统中的File对象file指定
    FileInputStream(File file)
    // 通过打开一个到实际文件的连接来创建一个FileInputStream，该文件通过文件系统中的路径name指定
    FileInputStream(String name)
2）.FileOutputStream
FileOutputStream：字节文件输出流是用于将数据写入到File，从程序中写入到其他位置。
FileOutputStream：字节文件输出流是用于将数据写入到File，从程序中写入到其他位置。
 构造方法：
    // 创建一个向指定File对象表示的文件中写入数据的文件输出流
    FileOutputStream(File file)
    // 创建一个向指定File对象表示的文件中写入数据的文件输出流
    FileOutputStream(File file, boolean append)               //append传入true表示内容追加
    // 创建一个向具有指定名称的文件中写入数据的输出文件流
    FileOutputStream(String name)
    // 创建一个向具有指定name的文件中写入数据的输出文件流
    FileOutputStream(String name, boolean append) 	     //append传入true表示内容追加
注：输出的目的地文件不存在，则会自动创建，不指定盘符的话，默认创建在项目目录下;输出换行符时一定要写\r\n不能只写\n,因为不同文本编辑器对换行符的识别存在差异性。
3.字节缓冲流（高效流）
1）.BufferedInputStream
BufferedInputStream：字节缓冲输入流，提高了读取效率。
     构造方法：
     // 创建一个 BufferedInputStream并保存其参数，即输入流in，以便将来使用。
     BufferedInputStream(InputStream in)
     // 创建具有指定缓冲区大小的 BufferedInputStream并保存其参数，即输入流in以便将来使用
     BufferedInputStream(InputStream in, int size)
2）.BufferedOutputStream
BufferedOutputStream：字节缓冲输出流，提高了写出效率。
     构造方法：
     // 创建一个新的缓冲输出流，以将数据写入指定的底层输出流
     BufferedOutputStream(OutputStream out)
     // 创建一个新的缓冲输出流，以将具有指定缓冲区大小的数据写入指定的底层输出流
     BufferedOutputStream(OutputStream out, int size）
   常用方法：
     // 将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此缓冲的输出流
     void write(byte[] b, int off, int len)
     // 将指定的字节写入此缓冲的输出流
     void write(int b)
     // 刷新此缓冲的输出流
     void flush()

四.字符流
1.字符流基类
1）.Reader
Reader:读取字符流的抽象类.
  常用方法：
    // 读取单个字符
    int read()
    // 将字符读入数组
    int read(char[] cbuf)
    // 将字符读入数组的某一部分
    abstract int read(char[] cbuf, int off, int len)
    // 跳过字符
    long skip(long n)
    // 关闭该流并释放与之关联的所有资源
    abstract void close()
2）.Writer
Writer:写入字符流的抽象类.
 常用方法：
    // 写入字符数组
     void write(char[] cbuf)
    // 写入字符数组的某一部分
    abstract void write(char[] cbuf, int off, int len)
    // 写入单个字符
    void write(int c)
    // 写入字符串
    void write(String str)
    // 写入字符串的某一部分
    void write(String str, int off, int len)
    // 将指定字符添加到此 writer
    Writer append(char c)
    // 将指定字符序列添加到此 writer
    Writer append(CharSequence csq)
    // 将指定字符序列的子序列添加到此 writer.Appendable
    Writer append(CharSequence csq, int start, int end)
    // 刷新该流的缓冲
    abstract void flush()
    // 关闭此流，但要先刷新它
    abstract void close()
2.字符转换流
1）.InputStreamReader
InputStreamReader：字节流转字符流，它使用的字符集可以由名称指定或显式给定，否则将接受平台默认的字符集。
	用于将一个字节流中的字节解码成字符
 构造方法：
    // 创建一个使用默认字符集的 InputStreamReader
    InputStreamReader(InputStream in)
    // 创建使用给定字符集的 InputStreamReader
    InputStreamReader(InputStream in, Charset cs)
    // 创建使用给定字符集解码器的 InputStreamReader
    InputStreamReader(InputStream in, CharsetDecoder dec)
    // 创建使用指定字符集的 InputStreamReader   ， 并指定编码，如"utf-8"
    InputStreamReader(InputStream in, String charsetName)
 特有方法：
    //返回此流使用的字符编码的名称 
    String getEncoding() 
2）.OutputStreamWriter
OutputStreamWriter：字符流转字节流。
	用于将写入的字符 编码成字节后写入到一个字节流
 构造方法：
    // 创建使用默认字符编码的 OutputStreamWriter
    OutputStreamWriter(OutputStream out)
    // 创建使用给定字符集的 OutputStreamWriter
    OutputStreamWriter(OutputStream out, Charset cs)
    // 创建使用给定字符集编码器的 OutputStreamWriter
    OutputStreamWriter(OutputStream out, CharsetEncoder enc)
    // 创建使用指定字符集的 OutputStreamWriter
    OutputStreamWriter(OutputStream out, String charsetName)
 特有方法：
    //返回此流使用的字符编码的名称 
    String getEncoding() 
3.字符缓冲流（高效流）
1）.BufferedReader
BufferedReader：字符缓冲流，从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取。
 构造方法：
    // 创建一个使用默认大小输入缓冲区的缓冲字符输入流
    BufferedReader(Reader in)
    // 创建一个使用指定大小输入缓冲区的缓冲字符输入流
    BufferedReader(Reader in, int sz)
 特有方法：
    // 读取一个文本行
    String readLine()
	测试代码:
	//生成字符缓冲流对象
       	 BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream("test.txt")));
       	 String str;
        	//一次性读取一行
       	 while ((str = reader.readLine()) != null) {
       	     System.out.println(str);// 爱生活，爱Android
       	 }
        	//关闭流
        	reader.close();
2）.BufferedWriter
BufferedWriter：字符缓冲流，将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。
 构造方法：
    // 创建一个使用默认大小输出缓冲区的缓冲字符输出流
    BufferedWriter(Writer out)
    // 创建一个使用给定大小输出缓冲区的新缓冲字符输出流
    BufferedWriter(Writer out, int sz)
 特有方法：
    // 写入一个行分隔符
    void newLine() 
4.FileReader、FileWriter
 FileReader：InputStreamReader类的直接子类，用来读取字符文件的便捷类，使用默认字符编码。
 FileWriter：OutputStreamWriter类的直接子类，用来写入字符文件的便捷类，使用默认字符编码。

例子：
//字节流，一次读写一个字节或一次读写一个字节数组或用高效流进行读写
    @Test
    void Stream() throws IOException {
        FileInputStream inputStream = new FileInputStream("F://Bandicam视频//springboot第三组.mp4");
        BufferedInputStream bis = new BufferedInputStream(inputStream);
        FileOutputStream outputStream = new FileOutputStream("springboot第三组.mp4");
        BufferedOutputStream bos = new BufferedOutputStream(outputStream);
        int len;
        byte[] bs = new byte[1024];
        // 开始时间
        long begin = System.currentTimeMillis();
        /*// 一次读取一个字节
        while ((len = inputStream.read()) != -1) {
            outputStream.write(len);
        }*/
        /*// 一次读取一个字节数组
        while ((len = inputStream.read(bs)) != -1) {
            outputStream.write(bs, 0, len);
        }*/
        //高效流一次读取一个字节数组
        while ((len = bis.read(bs)) != -1) {
            bos.write(bs, 0, len);
        }
        // 用时毫秒
        System.out.println(System.currentTimeMillis() - begin);// 读取一个字节296665  读取一个字节数组1734 高效流读取一个字节数组453
        /*//关闭流释放资源
        inputStream.close();
        outputStream.flush();
        outputStream.close();*/
        bis.close();
        bos.flush();
        bos.close();
    }



